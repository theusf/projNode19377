var getComponentsContext = require("../ComponentsContext").D_;
var componentsUtil = require("../util");
var componentLookup = componentsUtil.h_;
var registry = require("../registry");
var modernRenderer = require("../renderer");
var resolveComponentKey = modernRenderer.ak_;
var trackAsyncComponents = modernRenderer.aw_;
var beginComponent = require("../beginComponent");
var endComponent = require("../endComponent");
var w10NOOP = require("warp10/constants").NOOP;

function createRendererFunc(templateRenderFunc, componentProps) {
    var typeName = componentProps.f_;
    //var assignedId = componentProps.id;
    var isSplit = componentProps.d_ === true;

    return function renderer(input, out, assignedId, renderingLogic) {
        trackAsyncComponents(out);

        var widgetBody = input.renderBody;
        var widgetState = input.widgetState;
        var widgetConfig = input.widgetConfig;

        var componentsContext = getComponentsContext(out);
        var globalComponentsContext = componentsContext.l_;

        var component = globalComponentsContext._q_;

        var isRerender = component !== undefined;
        var id = assignedId;
        var isExisting;
        var parentComponentDef = componentsContext.j_;
        var ownerComponentDef = out.ax_;
        var ownerComponentId = ownerComponentDef && ownerComponentDef.id;
        var key = out.an_;
        var customEvents = out.ay_;

        out.ax_ = null;

        if (component) {
            id = component.id;
            isExisting = true;
            globalComponentsContext._q_ = null;
        } else {
            if (parentComponentDef) {
                if (key != null) {
                    key = key.toString();
                }
                id = id || resolveComponentKey(key, parentComponentDef);
            } else if (parentComponentDef) {
                id = parentComponentDef._H_();
            } else {
                id = globalComponentsContext._H_();
            }
        }

        if (registry.az_ && typeName) {
            if (renderingLogic) delete renderingLogic.onRender;
            component = registry._J_(renderingLogic || {}, id, input, out, typeName, customEvents, ownerComponentId);
            if (input.ap_) {
                component.input = input.ap_;
            }
        } else {
            if (!component) {
                if (isRerender) {
                    // Look in in the DOM to see if a component with the same ID and type already exists.
                    component = componentLookup[id];
                    if (component && component.f_ !== typeName) {
                        component = undefined;
                    }
                }

                if (component) {
                    isExisting = true;
                } else {
                    isExisting = false;
                    // We need to create a new instance of the component
                    if (typeName) {
                        component = registry._J_(typeName, id);
                    }
                }
            }
        }

        var isFakeComponent = false;

        if (!component) {
            isFakeComponent = true;
            component = {
                id: id,
                m_: {}
            };
        } else {
            component.U_ = true;
        }

        component.state = widgetState;
        component.widgetConfig = widgetConfig;
        component.ao_ = widgetBody || component.ao_ || w10NOOP;

        var componentDef = beginComponent(componentsContext, component, key, ownerComponentDef, isSplit, isFakeComponent);
        var parentLegacyComponentDef = componentsContext.av_;
        componentsContext.av_ = componentDef;

        // This is a hack, but we have to swap out the component instance stored with this node
        var vComponentNode = out.aA_;

        componentDef.k_ = isFakeComponent ? null : component;
        componentDef._C_ = isExisting;
        componentDef.ah_ = true;

        componentDef.t = function (typeName) {
            if (typeName) {
                if (registry.az_) {
                    var oldComponent = component;
                    if (renderingLogic) delete renderingLogic.onRender;
                    component = registry._J_(renderingLogic || {}, id, input, out, typeName, customEvents, ownerComponentId);
                    if (input.ap_) {
                        component.input = input.ap_;
                    }
                    Object.assign(component, oldComponent);
                    beginComponent(componentsContext, component, key, ownerComponentDef, isSplit, false, this);
                } else {
                    vComponentNode.k_ = component = registry._J_(typeName, component.id);
                }
                this.k_ = component;
            }
        };

        if (!isFakeComponent && !registry.az_) {
            component.E_("ar_");
        }

        // Render the template associated with the component using the final template
        // data that we constructed
        templateRenderFunc(input, out, componentDef, componentDef, component);

        if (customEvents && componentDef.k_) {
            if (registry.az_) {
                componentDef.O_ = customEvents;
                componentDef.H_ = ownerComponentId;
            } else {
                componentDef.k_._v_(customEvents, ownerComponentId);
            }
        }

        endComponent(out, componentDef);
        componentsContext.j_ = parentComponentDef;
        componentsContext.av_ = parentLegacyComponentDef;
    };
}

module.exports = createRendererFunc;